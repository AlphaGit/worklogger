org: alphaser
app: worklogger
service: worklogger

provider:
  name: aws
  runtime: nodejs16.x
  httpApi:
    disableDefaultEndpoint: true
  endpointType: regional
  stage: ${opt:stage, 'dev'}
  environment:
    STAGE: ${self:provider.stage}

  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "s3:PutObject"
            - "s3:GetObject"
          Resource: "arn:aws:s3:::worklogger-${self:provider.stage}/*"
        - Effect: "Allow"
          Action:
            - "ses:SendEmail"
          Resource: "*"

functions:
  logTimesheets:
    handler: lambdaHandler.logTimesheets
    name: worklogger-logTimesheets-${opt:stage, 'dev'}
    description: Logs timesheets from different sources
    memorySize: 128
    timeout: 60
    package:
      patterns:
        - "*.mjs"
        - "app/**/*.mjs"
    events:
      - schedule:
          rate: cron(0 11 * * ? *)
          enabled: ${self:custom.environments.${self:provider.stage}.SCHEDULE_ENABLED}
          description: Daily run
          input:
            s3: ${self:custom.environments.${self:provider.stage}.S3_BUCKET}
            c: daily_configuration.json
      - schedule:
          rate: cron(0 11 1 * ? *)
          enabled: ${self:custom.environments.${self:provider.stage}.SCHEDULE_ENABLED}
          description: Monthly run
          input:
            s3: ${self:custom.environments.${self:provider.stage}.S3_BUCKET}
            c: monthly_configuration.json

  tokenLogger:
    handler: lambdaHandler.storeToken
    name: worklogger-storeToken-${opt:stage, 'dev'}
    description: Stores the token from the OAuth flow
    memorySize: 128
    timeout: 29
    package:
      patterns:
        - "*.mjs"
        - "app/**/*.mjs"
    events:
      - http:
          path: /token
          method: get
          cors: true

  login:
    handler: lambdaHandler.loginRedirect
    name: worklogger-loginRedirect-${opt:stage, 'dev'}
    description: Redirects to the OAuth flow
    memorySize: 128
    timeout: 29
    package:
      patterns:
        - "*.mjs"
        - "app/**/*.mjs"
    events:
      - http:
          path: /login
          method: get

plugins:
  - serverless-offline
  - serverless-event-constant-inputs
  - serverless-webpack

custom:
  webpack:
    webpackConfig: 'webpack.config.cjs'
    includeModules: true
    packager: 'npm'
    keepOutputDirectory: true
  isProd: ${self:provider.stage, 'dev'}
  environments:
    prod:
      SCHEDULE_ENABLED: true
      S3_BUCKET: worklogger-prod
    dev:
      SCHEDULE_ENABLED: false
      S3_BUCKET: worklogger-dev

build:
  esbuild: false
configValidationMode: error